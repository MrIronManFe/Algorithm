/*
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1

示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
提示：

2 <= n <= 58

*/

// 根据数学规律来
/**
 * @param {number} n
 * @return {number}
 */
var cuttingRope = function (n) {
    // 当 n≤3 时，按照规则应不切分，但由于题目要求必须剪成 m>1 段，因此必须剪出一段长度为 11 的绳子，即返回 n - 1 。
    if (n <= 3) return n - 1;
    let a = Math.floor(n / 3)
    let b = n % 3
    // 当 b = 0 时，直接返回 3^a
    // 当 b = 1 时，要将一个 1+3 转换为 2+2，因此返回 3^{a-1}*4
    // 当 b = 2 时，返回 3^a*2
    if (b === 0) {
        return Math.pow(3, a)
    }
    if (b == 1) {
        return Math.pow(3, a - 1) * 4
    }
    return (Math.pow(3, a) * 2)
};
